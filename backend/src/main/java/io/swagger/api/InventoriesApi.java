/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.AddTag;
import io.swagger.model.CommentRequest;
import io.swagger.model.Error400;
import io.swagger.model.Error500;
import io.swagger.model.Extension;
import io.swagger.model.ExtensionsPatchField;
import io.swagger.model.History;
import io.swagger.model.IdComponentsBody;
import io.swagger.model.Item;
import io.swagger.model.ItemCreate;
import io.swagger.model.ItemPatchField;
import io.swagger.model.Tag;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-05-03T16:45:10.360954900+02:00[Europe/Berlin]")
@Validated
public interface InventoriesApi {

    @Operation(summary = "Fügt einem Gegenstand eine Erweiterung hinzu", description = "Erstellt eine Erweiterung und fügt diese dem spezifizierten Gegenstand hinzu.", tags={ "Inventarisierungsliste - Erweiterungen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erweiterung wurde hinzugefügt"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/components",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addComponent(@Parameter(in = ParameterIn.PATH, description = "ID des Inventars, dem eine Erweiterung hinzugefügt wird", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.DEFAULT, description = "ID der zu hinzufügenden Erweiterung", required=true, schema=@Schema()) @Valid @RequestBody IdComponentsBody body
);


    @Operation(summary = "Fügt Gegenstand Tags hinzu", description = "Fügt dem spezifizierten Gegenstand ein Tag hinzu.", tags={ "Inventarisierungsliste - Tags" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Gegenstand wurde erfolgreich getagt"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/tags",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addTag(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.DEFAULT, description = "Fügt Tags anhand der ID hinzu. Es können mehrere Tags auf einmal hinzugefügt werden.", required=true, schema=@Schema()) @Valid @RequestBody AddTag body
);


    @Operation(summary = "Erstellt neues Kommentar", description = "Ein neuer Kommentar wird erstellt und dem spezifizierten Gegenstand hinzugefügt.", tags={ "Inventarisierungsliste - Kommentare" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Kommentar wurde erfolgreich erstellt", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentRequest.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/comments",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<CommentRequest> createComment(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.DEFAULT, description = "ID der zu hinzufügenden Erweiterung", required=true, schema=@Schema()) @Valid @RequestBody CommentRequest body
);


    @Operation(summary = "Erstellt einen Gegenstand in der Inventarisierungsliste", description = "Neues Gerät/Software inventarisieren.", tags={ "Inventarisierungsliste" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Gerät wurde inventarisiert", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Item.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Inventarisieren", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Item> createItem(@Parameter(in = ParameterIn.DEFAULT, description = "Neues Gerät inventarisieren. Ausgewählte Tags werden beim Erstellen in einem JSON-Array übergeben. Falls keine Tags ausgewählt wurden wird ein leeres JSON-Array übergeben.", required=true, schema=@Schema()) @Valid @RequestBody ItemCreate body
);


    @Operation(summary = "Löscht Erweiterung eines Gegenstandes", description = "Löscht die spezifizierte Erweiterung aus der Liste des zugehörigen Gegenstandes.", tags={ "Inventarisierungsliste - Erweiterungen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erweiterung wurde erfolgreich gelöscht"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/components/{component-id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteComponent(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.PATH, description = "ID der Erweiterung zum löschen", required=true, schema=@Schema()) @PathVariable("component-id") Long componentId
);


    @Operation(summary = "Löscht einen Gegenstand aus der Inventarisierungsliste", description = "Deinventarisiert einen Gegenstand aus der Inventarisierungsliste. Entspricht einem Soft-Delete.", tags={ "Inventarisierungsliste" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Gegenstand wurde erfolgreich gelöscht"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler, Gegenstand wurde nicht gelöscht", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteItem(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands zum löschen", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Ändert Erweiterung eines Gegenstandes", description = "Ändert die Daten einer einzelnen Erweiterung des spezifizierten Gegenstandes.", tags={ "Inventarisierungsliste - Erweiterungen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Gegenstand wurde erfolgreich bearbeitet"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/components/{component-id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> editComponent(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.PATH, description = "ID der Erweiterung zum bearbeiten", required=true, schema=@Schema()) @PathVariable("component-id") Long componentId
, @Parameter(in = ParameterIn.DEFAULT, description = "Array mit Feldern, die geändert werden sollen.  Jedes Element enthält das Attribut (field) und den neuen Wert. Kann leer sein, wenn keine Änderungen vorgenommen werden. Mögliche Felder sind:   - extensions_inventory_id   - extensions_description   - extensions_serial_number   - extensions_price   - extensions_created_at ", required=true, schema=@Schema()) @Valid @RequestBody List<ExtensionsPatchField> body
);


    @Operation(summary = "Ändert Gegenstand in der Inventarisierungsliste", description = "Ändert Daten eines Gegenstandes mit gegebener ID.", tags={ "Inventarisierungsliste" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Gegenstand wurde erfolgreich bearbeitet", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<List<Item>> editItem(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands zum Bearbeiten", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.DEFAULT, description = "Array mit Feldern, die geändert werden sollen.  Jedes Element enthält das Attribut (field) und den neuen Wert. Kann leer sein, wenn keine Änderungen vorgenommen werden. Mögliche Felder sind:   - cost_center   - inventories_description   - company   - inventories_price   - inventories_serial_number   - inventories_location   - orderer   - tags ", required=true, schema=@Schema()) @Valid @RequestBody List<ItemPatchField> body
);


    @Operation(summary = "Finde Gegenstände mit Hilfe von Filtern, die in der Query übergeben werden", description = "Mehrere Filter können mit komma separiert werden zB. Filter1, Filter2.", tags={ "Filter (über Query Parameter umsetzen)" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreicht gefiltert", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/filter",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Item>> filterItemsByTags(@Parameter(in = ParameterIn.QUERY, description = "Filterfunktion" ,schema=@Schema()) @Valid @RequestParam(value = "tags", required = false) List<String> tags
);


    @Operation(summary = "Ruft alle Elemente in der Inventarisierunsliste ab", description = "", tags={ "Inventarisierungsliste" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "A list of items", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Item.class)))),
        
        @ApiResponse(responseCode = "204", description = "No content found"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<Item>> inventoriesGet();


    @Operation(summary = "Liste der Kommentare zu einem Gegenstand", description = "Ruft die Liste aller Kommentare zu einem Gegenstand ab.", tags={ "Inventarisierungsliste - Kommentare" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiches Abrufen der Kommentare", content = @Content(mediaType = "application/json", schema = @Schema(implementation = CommentRequest.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Abrufen des Gegenstands", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/comments",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<CommentRequest> inventoriesIdCommentsGet(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Gibt eine einzelne Erweiterung zurück", description = "Ruft den Inhalt der spezifizierten Erweiterung eines Gegenstandes ab.", tags={ "Inventarisierungsliste - Erweiterungen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiches Abrufen der Erweiterung"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Abrufen des Gegenstands", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/components/{component-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> inventoriesIdComponentsComponentIdGet(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.PATH, description = "ID der Erweiterung", required=true, schema=@Schema()) @PathVariable("component-id") Long componentId
);


    @Operation(summary = "Ruft alle Erweiterungen eines Gegenstandes ab", description = "Ruft die Liste aller bestehenden Erweiterungen eines Gegenstands ab.", tags={ "Inventarisierungsliste - Erweiterungen" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiches Abrufen der Erweiterung(en)", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Extension.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Abrufen des Gegenstands", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/components",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Extension> inventoriesIdComponentsGet(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Gibt Informationen für Detailansicht eines einzelnen Gegenstands der Liste zurück", description = "Ruft Informationen zu Gegenstand mit entsprechender ID ab.", tags={ "Inventarisierungsliste" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiches Abrufen des Gegenstandes (Response-Body muss noch abhängig von der Detailansicht eingefügt werden)"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Abrufen des Gegenstand", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> inventoriesIdGet(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Liste der Änderungen an einem Gegenstand", description = "Ruft die Liste aller Änderungen an einem Gegenstand seit der Inventarisierung ab.", tags={ "Inventarisierungsliste - Historie" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiches Abrufen der Historie", content = @Content(mediaType = "application/json", schema = @Schema(implementation = History.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Abrufen des Gegenstands", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/history",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<History> inventoriesIdHistoryGet(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Liste der Tags eines Gegenstands", description = "Ruft die Liste aller benutzerdefinierten Tags eines Gegenstandes ab.", tags={ "Inventarisierungsliste - Tags" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreiches Abrufen der Tags", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Tag.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Abrufen des Gegenstands", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/tags",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Tag> inventoriesIdTagsGet(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
);


    @Operation(summary = "Löscht Kommentar eines Gegenstands", description = "Löscht das spezifizierte Kommentar des entsprechenden Gegenstandes.", tags={ "Inventarisierungsliste - Kommentare" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Kommentar wurde erfolgreich gelöscht"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/comments/{comment-id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeComment(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.PATH, description = "ID des Kommentars zum löschen", required=true, schema=@Schema()) @PathVariable("comment-id") Long commentId
);


    @Operation(summary = "Entfernt Tag von einem Gegenstand", description = "Entfernt das spezifizierte Tag von dem gegebenen Gegenstand.", tags={ "Inventarisierungsliste - Tags" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Tag wurde erfolgreich entfernt"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/inventories/{id}/tags/{tag-id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> removeTag(@Parameter(in = ParameterIn.PATH, description = "ID des Gegenstands", required=true, schema=@Schema()) @PathVariable("id") Long id
, @Parameter(in = ParameterIn.PATH, description = "ID des Tags zum entfernen", required=true, schema=@Schema()) @PathVariable("tag-id") Long tagId
);

}

