/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Error400;
import io.swagger.model.Error500;
import io.swagger.model.ExcelsheetsBody;
import org.springframework.core.io.Resource;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-05-03T16:45:10.360954900+02:00[Europe/Berlin]")
@Validated
public interface ExcelSheetsApi {

    @Operation(summary = "Exportiert Inventarisierungsliste als Excel-Datei", description = "Gesamte Liste kann ohne Parameter exportiert werden, mit Parametern werden nur einzelne Einträge exportiert", tags={ "Import/Export von Dateien" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Excel-Liste wurde erfolgreich erstellt und zum Download bereitgestellt", content = @Content(mediaType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", schema = @Schema(implementation = Resource.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Fehler beim Erstellen der Excel-Liste", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/excel-sheets",
        produces = { "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet", "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Resource> excelSheetsGet(@Parameter(in = ParameterIn.QUERY, description = "ID der Gegenstände bzw. range von - bis" ,schema=@Schema()) @Valid @RequestParam(value = "ids", required = false) List<Long> ids
);


    @Operation(summary = "Schickt Excelliste zum Importieren an Backend", description = "Datei muss für Umwandlung passendes Format haben", tags={ "Import/Export von Dateien" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Daten wurden erfolgreich verarbeitet"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/excel-sheets",
        produces = { "application/json" }, 
        consumes = { "application/form-data" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> excelSheetsPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody ExcelsheetsBody body
);

}

