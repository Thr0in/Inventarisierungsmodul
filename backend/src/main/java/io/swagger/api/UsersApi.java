/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.68).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Article;
import io.swagger.model.Error400;
import io.swagger.model.Error500;
import io.swagger.model.InlineResponse200;
import io.swagger.model.InlineResponse2001;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2025-05-03T16:45:10.360954900+02:00[Europe/Berlin]")
@Validated
public interface UsersApi {

    @Operation(summary = "Wird von BESY aufgerufen um eine getätigte Bestellung zu übermitteln", description = "Eine neue Bestellung unter dem angegebenen user speichern/erstellen.", tags={ "users - orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Bestellung wurde erfolgreich registriert"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler beim registrieren der Bestellung", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createOrder(@Parameter(in = ParameterIn.PATH, description = "User-id des Users bei dem die offene Bestellung angelegt werden soll", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
);


    @Operation(summary = "Artikel anlegen", description = "Einen neuen Artikel unter einer Bestellung ablegen/erstellen. Nach anlegen eines Artikels wird überprüft, ob alle Artikel in der Bestellung inventarisiert wurden. Wenn ja wird die Bestellung als bearbeitet markiert.", tags={ "users - orders - items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Artikel wurde erfolgreich registriert"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler beim registrieren der Artikel", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}/items",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> createOrderItem(@Parameter(in = ParameterIn.PATH, description = "User-id des Users bei dem die offene Bestellung angelegt werden soll", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
, @Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody Article body
);


    @Operation(summary = "Löscht eine Bestellung", description = "Löscht eine registrierte Bestellung.", tags={ "users - orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Bestellung wurde erfolgreich gelöscht"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrder(@Parameter(in = ParameterIn.PATH, description = "ID des Users", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
);


    @Operation(summary = "Löscht einen Artikel", description = "Löscht einen Artikel einer registrierten Bestellung.", tags={ "users - orders - items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Artikel wurde erfolgreich gelöscht"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}/items/{item-id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteOrderItem(@Parameter(in = ParameterIn.PATH, description = "ID des Users", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
, @Parameter(in = ParameterIn.PATH, description = "ID des Artikels", required=true, schema=@Schema()) @PathVariable("item-id") Long itemId
);


    @Operation(summary = "Ändert Artikel", description = "Ändern der Daten eines Artikels mit gegebener ID.    Mögliche Felder sind:   - cost_center   - inventories_id   - inventories_description   - company   - inventories_price   - inventories_serial_number   - inventories_location   - orderer ", tags={ "users - orders - items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Artikel erfolgreich bearbeitet"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}/items/{item-id}",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<Void> editOrderItem(@Parameter(in = ParameterIn.PATH, description = "ID des Users", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
, @Parameter(in = ParameterIn.PATH, description = "ID des Artikels", required=true, schema=@Schema()) @PathVariable("item-id") Long itemId
);


    @Operation(summary = "Anmeldung des Benutzers.", description = "Anmeldung in das System.", tags={ "users (noch unklar, abhängig von keycloak)" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreich angemeldet"),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/login",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> loginUser(@Parameter(in = ParameterIn.QUERY, description = "Der Benutzername für das Login" ,schema=@Schema()) @Valid @RequestParam(value = "username", required = false) String username
, @Parameter(in = ParameterIn.QUERY, description = "Das Password für das Login" ,schema=@Schema()) @Valid @RequestParam(value = "password", required = false) String password
);


    @Operation(summary = "Abmelden des derzeitigen Benutzers.", description = "Abmelden des Benutzers.", tags={ "users (noch unklar, abhängig von keycloak)" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreich abgemeldet"),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/logout",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Void> logoutUser();


    @Operation(summary = "Ruft alle offenen Bestellungen ab.", description = "Alle Bestellungen, die von diesem User gemacht wurden, die noch offen sind.", tags={ "users - orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Anzeigen von offenen Bestellungen von dem jeweiligen User", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))),
        
        @ApiResponse(responseCode = "400", description = "Error 400: Bad Request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error400.class))),
        
        @ApiResponse(responseCode = "500", description = "Interner Serverfehler beim Anzeigen von offenen Bestellungen", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse200> openOrders(@Parameter(in = ParameterIn.PATH, description = "User-id vom User bei dem man die offenen Bestellungen sehen will", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
);


    @Operation(summary = "Ruft einzelne Bestellung ab", description = "Die Informationen einer einzelnen Bestellung können abgerufen werden.", tags={ "users - orders" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Eine Bestellung wurde übertragen", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "204", description = "Bestellung nicht gefunden"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> usersUserIdOrdersOrderIdGet(@Parameter(in = ParameterIn.PATH, description = "ID des Users", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
);


    @Operation(summary = "Ruft Artikel einer Bestellung ab", description = "Die Artikel einer einzelnen Bestellung können abgerufen werden.", tags={ "users - orders - items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Eine Liste an Artikeln wurde übertragen", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse2001.class))),
        
        @ApiResponse(responseCode = "204", description = "Bestellung nicht gefunden"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<InlineResponse2001> usersUserIdOrdersOrderIdItemsGet(@Parameter(in = ParameterIn.PATH, description = "ID des Users", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
);


    @Operation(summary = "Ruft einzelnen Artikel ab", description = "Die Informationen eines einzelnen Artikels können abgerufen werden.", tags={ "users - orders - items" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Ein Artikel wurde übertragen", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Article.class))),
        
        @ApiResponse(responseCode = "204", description = "Artikel nicht gefunden"),
        
        @ApiResponse(responseCode = "500", description = "Internal server error", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Error500.class))) })
    @RequestMapping(value = "/users/{user-id}/orders/{order-id}/items/{item-id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Article> usersUserIdOrdersOrderIdItemsItemIdGet(@Parameter(in = ParameterIn.PATH, description = "ID des Users", required=true, schema=@Schema()) @PathVariable("user-id") Long userId
, @Parameter(in = ParameterIn.PATH, description = "ID der Bestellung", required=true, schema=@Schema()) @PathVariable("order-id") Long orderId
, @Parameter(in = ParameterIn.PATH, description = "ID des Artikels", required=true, schema=@Schema()) @PathVariable("item-id") Long itemId
);

}

